{"ast":null,"code":"var _jsxFileName = \"/Users/justinasokolova/Desktop/Frontend Dev /Result School/Module 2 - React/Cart/my-cart/src/components/counter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const formatCount = () => {\n    return count === 0 ? \"empty\" : count;\n  };\n  const getBadgeClasses = () => {\n    let classes = \"badge m-2 \";\n    classes += count === 0 ? \"bg-warning\" : \"bg-primary\";\n    return classes;\n  };\n  const handleIncrement = () => {\n    setCount(prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: getBadgeClasses(),\n      children: formatCount()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary btm-sm m-2\",\n      onClick: handleIncrement,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Counter, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = Counter;\nexport default Counter;\n\n// хук useState() - асинхронный; инструмент для хранения и обновления данных в \"хранилище\"; \n// возвращает кортеж(массив, в кот строгая последовательность элементов): \n// [count, setCount] = count - состояние; setCount - функция, которая обновляет состояние\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["React","useState","Counter","count","setCount","formatCount","getBadgeClasses","classes","handleIncrement","prevState"],"sources":["/Users/justinasokolova/Desktop/Frontend Dev /Result School/Module 2 - React/Cart/my-cart/src/components/counter.jsx"],"sourcesContent":["import React, {useState} from \"react\"\n\nconst Counter = () => {\n    const [count, setCount] = useState(0)\n\n    const formatCount = () => {\n        return count === 0 ? \"empty\" : count;\n    }\n\n    const getBadgeClasses = () => {\n        let classes = \"badge m-2 \";\n        classes += count === 0 ? \"bg-warning\" : \"bg-primary\";\n        return classes;\n    }\n    \n    const handleIncrement = () => {\n        setCount(prevState)\n    }\n\n    return (\n        <>\n            <span className={getBadgeClasses()}>{formatCount()}</span>\n            <button className=\"btn btn-primary btm-sm m-2\" onClick={handleIncrement}>+</button>\n        </>\n    )\n};\n\nexport default Counter;\n\n// хук useState() - асинхронный; инструмент для хранения и обновления данных в \"хранилище\"; \n// возвращает кортеж(массив, в кот строгая последовательность элементов): \n// [count, setCount] = count - состояние; setCount - функция, которая обновляет состояние"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAA;AAAA;AAErC,MAAMC,OAAO,GAAG,MAAM;EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMI,WAAW,GAAG,MAAM;IACtB,OAAOF,KAAK,KAAK,CAAC,GAAG,OAAO,GAAGA,KAAK;EACxC,CAAC;EAED,MAAMG,eAAe,GAAG,MAAM;IAC1B,IAAIC,OAAO,GAAG,YAAY;IAC1BA,OAAO,IAAIJ,KAAK,KAAK,CAAC,GAAG,YAAY,GAAG,YAAY;IACpD,OAAOI,OAAO;EAClB,CAAC;EAED,MAAMC,eAAe,GAAG,MAAM;IAC1BJ,QAAQ,CAACK,SAAS,CAAC;EACvB,CAAC;EAED,oBACI;IAAA,wBACI;MAAM,SAAS,EAAEH,eAAe,EAAG;MAAA,UAAED,WAAW;IAAE;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC1D;MAAQ,SAAS,EAAC,4BAA4B;MAAC,OAAO,EAAEG,eAAgB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAW;EAAA,gBACpF;AAEX,CAAC;AAAC,GAvBIN,OAAO;AAAA,KAAPA,OAAO;AAyBb,eAAeA,OAAO;;AAEtB;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}